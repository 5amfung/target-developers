(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8708],{9339:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return m},default:function(){return u}});var a,i=t(22122),d=t(19756),o=(t(15007),t(64983)),r=t(99536),l=["components"],m={},c=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),s={_frontmatter:m},p=r.Z;function u(e){var n=e.components,t=(0,d.Z)(e,l);return(0,o.mdx)(p,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"sdk-events"},"SDK Events"),(0,o.mdx)("h2",{id:"description"},"Description"),(0,o.mdx)("p",null,"When ",(0,o.mdx)("a",{parentName:"p",href:"../initialize-sdk.md"},"initializing the SDK"),", an optional ",(0,o.mdx)("inlineCode",{parentName:"p"},"OnDeviceDecisioningReady")," delegate can be provided on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"TargetClientConfig")," object, which will be invoked when the SDK is ready for on-device method calls.\nThere are also a couple other delegates available for handling the on-device decisioning artifact download."),(0,o.mdx)("h2",{id:"events"},"Events"),(0,o.mdx)("p",null,"The following delegates can be configured for certain events:"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Name"),(0,o.mdx)("th",{parentName:"tr",align:null},"Arguments"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"OnDeviceDecisioningReady"),(0,o.mdx)("td",{parentName:"tr",align:null},"None"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called only once the first time the client is ready for on-device decisioning")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"ArtifactDownloadSucceeded"),(0,o.mdx)("td",{parentName:"tr",align:null},"string contents of artifact file"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called every time an on-device decisioning artifact is downloaded")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"ArtifactDownloadFailed"),(0,o.mdx)("td",{parentName:"tr",align:null},"Exception"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called every time there is a failure to download an on-device decisioning artifact")))),(0,o.mdx)("h2",{id:"example"},"Example"),(0,o.mdx)(c,{slots:"heading, code",repeat:"1",languages:"dotnet",mdxType:"CodeBlock"}),(0,o.mdx)("h3",{id:"net"},".","NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-dotnet"},'var clientConfig = new TargetClientConfig.Builder("acmeclient", "1234567890@AdobeOrg")\n    .SetDecisioningMethod(DecisioningMethod.OnDevice)\n    .SetOnDeviceDecisioningReady(DecisioningReady)\n    .SetArtifactDownloadSucceeded(artifact => Console.WriteLine("The artifact was successfully downloaded. Contents: " + artifact))\n    .SetArtifactDownloadFailed(exception => Console.WriteLine("The artifact failed to download. Exception: " + exception.Message))\n    .Build();\n\nvar targetClient = TargetClient.Create(clientConfig);\n\n// ...\n\nstatic void DecisioningReady()\n{\n    var mboxRequests = new List<MboxRequest> { new (index: 1, name: "a1-serverside-ab") };\n\n    var targetDeliveryRequest = new TargetDeliveryRequest.Builder()\n        .SetExecute(new ExecuteRequest(mboxes: mboxRequests))\n        .Build();\n\n    var targetResponse = targetClient.GetOffers(targetDeliveryRequest);\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-sdk-net-sdk-events-md-d3fd6c613429989c6487.js.map