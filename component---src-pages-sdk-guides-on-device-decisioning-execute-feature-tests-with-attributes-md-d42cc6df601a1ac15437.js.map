{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/sdk-guides/on-device-decisioning/execute-feature-tests-with-attributes.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-sdk-guides-on-device-decisioning-execute-feature-tests-with-attributes-md-d42cc6df601a1ac15437.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"execute-feature-tests-with-attributes\"\n    }}>{`Execute feature tests with attributes`}</h1>\n    <h2 {...{\n      \"id\": \"summary-of-steps\"\n    }}>{`Summary of steps`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Enable On-Device Decisioning for your organization`}</li>\n      <li parentName=\"ol\">{`Create an A/B activity`}</li>\n      <li parentName=\"ol\">{`Define your A and B`}</li>\n      <li parentName=\"ol\">{`Add an audience`}</li>\n      <li parentName=\"ol\">{`Set traffic allocation`}</li>\n      <li parentName=\"ol\">{`Set traffic distribution to variations`}</li>\n      <li parentName=\"ol\">{`Set up reporting`}</li>\n      <li parentName=\"ol\">{`Add metrics for tracking KPIs`}</li>\n      <li parentName=\"ol\">{`Implement code to execute feature tests with attributes`}</li>\n      <li parentName=\"ol\">{`Implement code to track conversion events`}</li>\n      <li parentName=\"ol\">{`Activate your feature tests with attributes`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`NOTE`}</strong>{`: Suppose you are a retail e-commerce company. You want to increase the conversion rate when customers browse and sort through your catalog of products. You have a hypothesis that certain sorting algorithms and pagination strategies yield better results than others. To test this theory, you decide to run a feature test that involves the redesign of the sorting widget using different sorting options for your end users. You want to ensure this feature test is executed at near-zero latency so it doesn't negatively impact user experiences and skew the results.`}</p>\n    <h2 {...{\n      \"id\": \"enable-on-device-decisioning-for-your-organization\"\n    }}>{`Enable On-Device Decisioning for your organization`}</h2>\n    <p>{`Enabling on-device decisioning ensures an A/B activity is executed at near-zero latency. To enable this feature, navigate to `}<strong parentName=\"p\">{`Administration`}</strong>{` > `}<strong parentName=\"p\">{`Implementation`}</strong>{` > `}<strong parentName=\"p\">{`Account details`}</strong>{` in Adobe Target, and enable the `}<strong parentName=\"p\">{`On-Device Decisioning`}</strong>{` toggle.`}</p>\n    <p><em parentName=\"p\">{`Insert image-ood4.png`}</em></p>\n    <p><strong parentName=\"p\">{`NOTE`}</strong>{`: You must have the Admin or Approver `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.adobe.com/content/help/en/target/using/administer/manage-users/user-management.html\"\n      }}>{`user role`}</a>{` to enable or disable the `}<strong parentName=\"p\">{`On-Device Decisioning`}</strong>{` toggle.`}</p>\n    <p>{`After enabling the `}<strong parentName=\"p\">{`On-Device Decisioning`}</strong>{` toggle, Adobe Target begins generating `}<em parentName=\"p\">{`rule artifacts`}</em>{` for your client.`}</p>\n    <h2 {...{\n      \"id\": \"create-an-ab-activity\"\n    }}>{`Create an A/B activity`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In Adobe Target, navigate to the `}<strong parentName=\"p\">{`Activities`}</strong>{` page, then select `}<strong parentName=\"p\">{`Create Activity`}</strong>{` > `}<strong parentName=\"p\">{`A/B test`}</strong>{`. `}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-ab.png`}</em></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the `}<strong parentName=\"p\">{`Create A/B Test Activity`}</strong>{` modal, leave the default `}<strong parentName=\"p\">{`Web`}</strong>{` option selected (1), select `}<strong parentName=\"p\">{`Form`}</strong>{` as your experience composer (2), select `}<strong parentName=\"p\">{`Default Workspace`}</strong>{` with `}<strong parentName=\"p\">{`No Property Restrictions`}</strong>{` (3), and click `}<strong parentName=\"p\">{`Next`}</strong>{` (4).`}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-form.png`}</em></p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"define-your-feature-flag-and-attribute-values\"\n    }}>{`Define your feature flag and attribute values`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the `}<strong parentName=\"p\">{`Experiences`}</strong>{` step of activity creation, provide a name for your activity (1) and add a second experience, Experience B, by clicking the `}<strong parentName=\"p\">{`Add Experience`}</strong>{` (2) button. Enter the name of the location (3) within your application where you want to execute your feature test with attributes. In the example shown below, `}<inlineCode parentName=\"p\">{`product-results-page`}</inlineCode>{` is the location defined for Experience A. (It is also the location defined for Experience B.)`}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-location.png`}</em></p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Experience A`}</strong>{` will contain the JSON that signals your business logic to do the following:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Initiate the sorting algorithm feature via the `}<inlineCode parentName=\"li\">{`test_sorting`}</inlineCode>{` feature flag`}</li>\n          <li parentName=\"ul\">{`Execute the recommended sorting algorithm defined in the `}<inlineCode parentName=\"li\">{`sorting_algorithm _**_attribute`}</inlineCode></li>\n          <li parentName=\"ul\">{`Return 50 products per page as defined by the pagination strategy defined in the `}<inlineCode parentName=\"li\">{`pagination_limit`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In Experience A, click to change the content from `}<strong parentName=\"p\">{`Default Content`}</strong>{` to the JSON by selecting `}<strong parentName=\"p\">{`Create JSON Offer`}</strong>{` as shown below (1).`}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-offer.png`}</em></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Define the JSON with `}<inlineCode parentName=\"p\">{`test_sorting`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sorting_algorithm`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`pagination_limit`}</inlineCode>{` flags and attributes that will be used to initiate the recommended sorting algorithm with a pagination limit of 50 products.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE`}</strong>{`: When Adobe Target buckets a user to see Experience A, the JSON with the defined attributes in the example will be returned. In your code, you will need to check the value of the feature flag `}<inlineCode parentName=\"p\">{`test_sorting`}</inlineCode>{` to see whether the sorting feature should be turned on. If so, you will use the recommended value of the `}<inlineCode parentName=\"p\">{`sorting_algorithm`}</inlineCode>{` attribute to show recommended products in the product list view. The limit of products to show for your application will be 50, since that is the value of the `}<inlineCode parentName=\"p\">{`pagination_limit`}</inlineCode>{` attribute.`}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-sorting.png`}</em></p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Experience B`}</strong>{` will define the JSON that signals your business logic to do the following:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Initiate the sorting algorithm feature via the test_sorting feature flag`}</li>\n          <li parentName=\"ul\">{`Execute the `}<inlineCode parentName=\"li\">{`best_sellers`}</inlineCode>{` sorting algorithm defined in the `}<inlineCode parentName=\"li\">{`sorting_algorithm _**_attribute`}</inlineCode></li>\n          <li parentName=\"ul\">{`Return 50 products per page as defined by the pagination strategy defined in the `}<inlineCode parentName=\"li\">{`pagination_limit`}</inlineCode></li>\n        </ul>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE`}</strong>{`: When Adobe Target buckets a user to see Experience B, the JSON with the defined attributes in the example will be returned. In your code, you will need to check the value of the feature flag `}<inlineCode parentName=\"p\">{`test_sorting`}</inlineCode>{` to see whether the sorting feature should be turned on. If so, you will use the `}<inlineCode parentName=\"p\">{`best_sellers`}</inlineCode>{` value of the `}<inlineCode parentName=\"p\">{`sorting_algorithm`}</inlineCode>{` attribute to show best selling products in the product list view. The limit of products to show for your application will be 50, since that is the value of the `}<inlineCode parentName=\"p\">{`pagination_limit`}</inlineCode>{` attribute.`}</p>\n        <p parentName=\"li\"><em parentName=\"p\">{`Insert image-sorting-b.png`}</em></p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"add-an-audience\"\n    }}>{`Add an audience`}</h2>\n    <p>{`In the `}<strong parentName=\"p\">{`Targeting`}</strong>{` step, keep the `}<strong parentName=\"p\">{`All Visitors`}</strong>{` audience. This will enable you to understand the impact of your sorting feature, as well as which algorithm and number of items best influence the results.`}</p>\n    <p><em parentName=\"p\">{`Insert image-audiences-b.png`}</em></p>\n    <h2 {...{\n      \"id\": \"set-traffic-allocation\"\n    }}>{`Set traffic allocation`}</h2>\n    <p>{`Define the percentage of your visitors against which you want to test your sorting algorithms and pagination strategy. In other words, to what percentage of your users do you want to roll out this test? In this example, to deploy this test to all logged-in users, keep the traffic allocation at 100%.`}</p>\n    <p><em parentName=\"p\">{`Insert image-allocation-100.png`}</em></p>\n    <h2 {...{\n      \"id\": \"set-traffic-distribution-to-variations\"\n    }}>{`Set traffic distribution to variations`}</h2>\n    <p>{`Define the percentage of your visitors that will see the recommended versus the best sellers sorting algorithm, with a limit of 50 products per page. In this example, keep the traffic distribution as a 50/50 split between Experiences A and B.`}</p>\n    <p><em parentName=\"p\">{`Insert image-variations-50.png`}</em></p>\n    <h2 {...{\n      \"id\": \"set-up-reporting\"\n    }}>{`Set up reporting`}</h2>\n    <p>{`In the `}<strong parentName=\"p\">{`Goals & Settings`}</strong>{` step, choose `}<strong parentName=\"p\">{`Adobe Target`}</strong>{` as the `}<strong parentName=\"p\">{`Reporting Source`}</strong>{` to view your A/B test results in the Adobe Target UI, or choose `}<strong parentName=\"p\">{`Adobe Analytics`}</strong>{` to view them in the Adobe Analytics UI.`}</p>\n    <p><em parentName=\"p\">{`Insert image-reporting-b.png`}</em></p>\n    <h2 {...{\n      \"id\": \"add-metrics-for-tracking-kpis\"\n    }}>{`Add metrics for tracking KPIs`}</h2>\n    <p>{`Choose a `}<strong parentName=\"p\">{`Goal Metric`}</strong>{` to measure the feature test with attributes. In this example, success is based on whether the user purchases a product, depending on the sorting algorithm and pagination strategy they were shown.`}</p>\n    <h2 {...{\n      \"id\": \"implement-feature-tests-with-attributes-into-your-application\"\n    }}>{`Implement feature tests with attributes into your application`}</h2>\n    <p><strong parentName=\"p\">{`Node.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\nconst options = {\n  client: \"testClient\",\n  organizationId: \"ABCDEF012345677890ABCDEF0@AdobeOrg\",\n  decisioningMethod: \"on-device\",\n  events: {\n    clientReady: targetClientReady\n  }\n};\nconst targetClient = TargetClient.create(options);\n\nfunction targetClientReady() {\n  return targetClient.getAttributes([\"product-results-page\"]).then(function(attributes) {\n    const test_sorting = attributes.getValue(\"product-results-page\", \"test-sorting\");\n    const sorting_algorithm = attributes.getValue(\"product-results-page\", \"sorting_algorithm\");\n    const pagination_limit = attributes.getValue(\"product-results-page\", \"pagination_limit\");\n  });\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`import com.adobe.target.edge.client.ClientConfig;\nimport com.adobe.target.edge.client.TargetClient;\nimport com.adobe.target.delivery.v1.model.ChannelType;\nimport com.adobe.target.delivery.v1.model.Context;\nimport com.adobe.target.delivery.v1.model.ExecuteRequest;\nimport com.adobe.target.delivery.v1.model.MboxRequest;\nimport com.adobe.target.edge.client.entities.TargetDeliveryRequest;\nimport com.adobe.target.edge.client.model.TargetDeliveryResponse;\n\nClientConfig config = ClientConfig.builder()\n    .client(\"testClient\")\n    .organizationId(\"ABCDEF012345677890ABCDEF0@AdobeOrg\")\n    .build();\nTargetClient targetClient = TargetClient.create(config);\nMboxRequest mbox = new MboxRequest().name(\"product-results-page\").index(0);\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n    .context(new Context().channel(ChannelType.WEB))\n    .execute(new ExecuteRequest().mboxes(Arrays.asList(mbox)))\n    .build();\nAttributes attributes = targetClient.getAttributes(request, \"product-results-page\");\nString testSorting = attributes.getString(\"product-results-page\", \"test-sorting\");\nString sortingAlgorithm = attributes.getString(\"product-results-page\", \"sorting_algorithm\");\nString paginationLimit = attributes.getString(\"product-results-page\", \"pagination_limit\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implement-code-to-track-conversion-events\"\n    }}>{`Implement code to track conversion events`}</h2>\n    <p><strong parentName=\"p\">{`Node.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`//... Code removed for brevity\n\n//When a conversion happens\nTargetClient.sendNotifications({\n    targetCookie,\n    \"request\" : {\n      \"notifications\" : [\n        {\n          type: \"click\",\n          timestamp : Date.now(),\n          id: \"conversion\",\n          mbox : {\n            name : \"product-results-page\"\n          }\n        }\n      ]\n    }\n})\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nContext context = new Context().channel(ChannelType.WEB);\n\nExecuteRequest executeRequest = new ExecuteRequest();\n\nNotificationDeliveryService notificationDeliveryService = new NotificationDeliveryService();\n\nNotification notification = new Notification();\nnotification.setId(\"conversion\");\nnotification.setImpressionId(UUID.randomUUID().toString());\nnotification.setType(MetricType.CLICK);\nnotification.setTimestamp(System.currentTimeMillis());\nnotification.setTokens(\n    Collections.singletonList(\n        \"IbG2Jz2xmHaqX7Ml/YRxRGqipfsIHvVzTQxHolz2IpSCnQ9Y9OaLL2gsdrWQTvE54PwSz67rmXWmSnkXpSSS2Q==\"));\n\nTargetDeliveryRequest targetDeliveryRequest =\n    TargetDeliveryRequest.builder()\n        .context(context)\n        .execute(executeRequest)\n        .notifications(Collections.singletonList(notification))\n        .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\nnotificationDeliveryService.sendNotification(request);\n\nAttributes attributes = targetClient.getAttributes(request, \"product-results-page\");\nString testSorting = attributes.getString(\"product-results-page\", \"test-sorting\");\nString sortingAlgorithm = attributes.getString(\"product-results-page\", \"sorting_algorithm\");\nString paginationLimit = attributes.getString(\"product-results-page\", \"pagination_limit\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"activate-your-feature-tests-with-attributes\"\n    }}>{`Activate your feature tests with attributes`}</h2>\n    <p><em parentName=\"p\">{`Insert image-activate.png`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}