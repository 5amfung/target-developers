{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/sdk/java/utility-methods.md"],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"mappings":"4OAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,mBADR,oBAGA,yHACA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,OAAOH,QAAQ,eACrE,qBAAK,iBAAMI,WAAW,MAClB,UAAa,iBADZ,qoEA8DTN,EAAWO,gBAAiB","file":"component---src-pages-sdk-java-utility-methods-md-c4e082077687d8e74a7c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"utility-methods\"\n    }}>{`Utility Methods`}</h1>\n    <p>{`These helper methods are reusable across controllers and can be moved to a separate utility class.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"JAVA\" mdxType=\"CodeBlock\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class TargetRequestUtils {\n\n    public static Context getContext(HttpServletRequest request) {\n        Context context = new Context()\n                .channel(ChannelType.WEB)\n                .timeOffsetInMinutes(330.0)\n                .address(getAddress(request));\n        return context;\n    }\n\n    public static Address getAddress(HttpServletRequest request) {\n        Address address = new Address()\n                .referringUrl(request.getHeader(\"referer\"))\n                .url(request.getRequestURL().toString());\n        return address;\n    }\n\n    public static List<TargetCookie> getTargetCookies(Cookie[] cookies) {\n        if (cookies == null) {\n            return Collections.emptyList();\n        }\n        return Arrays.stream(cookies)\n                .filter(Objects::nonNull)\n                .filter(cookie -> CookieUtils.getTargetCookieNames().contains(cookie.getName()))\n                .map(cookie -> new TargetCookie(cookie.getName(), cookie.getValue(), cookie.getMaxAge()))\n                .collect(Collectors.toList());\n    }\n\n    public static HttpServletResponse setCookies(List<TargetCookie> targetCookies,\n                                                  HttpServletResponse response) {\n        targetCookies\n                .stream()\n                .map(targetCookie -> new Cookie(targetCookie.getName(), targetCookie.getValue()))\n                .forEach(cookie -> {\n                    cookie.setPath(\"/\");\n                    response.addCookie(cookie);\n                });\n        return response;\n    }\n\n    public static List<MboxRequest> getMboxRequests(String... name) {\n        List<MboxRequest> mboxRequests = new ArrayList<>();\n        for (int i = 0; i < name.length; i++) {\n            mboxRequests.add(new MboxRequest().name(name[i]).index(i));\n        }\n        return mboxRequests;\n    }\n\n    public static PrefetchRequest getPrefetchRequest() {\n        PrefetchRequest prefetchRequest = new PrefetchRequest();\n        ViewRequest viewRequest = new ViewRequest();\n        prefetchRequest.setViews(Arrays.asList(viewRequest));\n        return prefetchRequest;\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}