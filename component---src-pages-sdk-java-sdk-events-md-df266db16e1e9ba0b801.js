(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6943],{50354:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return p}});var a,i=t(22122),d=t(19756),o=(t(15007),t(64983)),r=t(99536),l=["components"],s={},c=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),m={_frontmatter:s},u=r.Z;function p(e){var n=e.components,t=(0,d.Z)(e,l);return(0,o.mdx)(u,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"sdk-events"},"SDK Events"),(0,o.mdx)("h2",{id:"description"},"Description"),(0,o.mdx)("p",null,"When ",(0,o.mdx)("a",{parentName:"p",href:"../initialize-sdk.md"},"initializing the SDK"),", an optional ",(0,o.mdx)("inlineCode",{parentName:"p"},"OnDeviceDecisioningHandler")," object can be provided on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ClientConfig")," object. It can be used to subscribe to various events that occur within the SDK. For instance, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onDeviceDecisioningReady")," event may be used with a callback function that will be invoked when the SDK is ready for method calls."),(0,o.mdx)("h2",{id:"events"},"Events"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"OnDeviceDecisioningHandler")," object contains the following callbacks, which are called for certain events:"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Name"),(0,o.mdx)("th",{parentName:"tr",align:null},"Arguments"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"onDeviceDecisioningReady"),(0,o.mdx)("td",{parentName:"tr",align:null},"None"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called only once the first time the client is ready for on-device decisioning")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"artifactDownloadSucceeded"),(0,o.mdx)("td",{parentName:"tr",align:null},"byte[] contents of artifact file"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called every time a on-device decisioning artifact is downloaded")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"artifactDownloadFailed"),(0,o.mdx)("td",{parentName:"tr",align:null},"Exception"),(0,o.mdx)("td",{parentName:"tr",align:null},"Called every time there is a failure to download a on-device decisioning artifact")))),(0,o.mdx)("h2",{id:"example"},"Example"),(0,o.mdx)(c,{slots:"heading, code",repeat:"1",languages:"JAVA",mdxType:"CodeBlock"}),(0,o.mdx)("h3",{id:"sdk-events-1"},"SDK Events"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'ClientConfig clientConfig = ClientConfig.builder()\n        .client("acmeclient")\n        .organizationId("1234567890@AdobeOrg")\n        .defaultDecisioningMethod(DecisioningMethod.ON_DEVICE)\n        .onDeviceDecisioningHandler(new OnDeviceDecisioningHandler() {\n            @Override\n            public void onDeviceDecisioningReady() {\n                // make getOffers requests\n                makeTargetRequests();\n            }\n\n            @Override\n            public void artifactDownloadSucceeded(byte[] artifactData) {\n                System.out.println("The artifact was successfully downloaded.");\n            }\n\n            @Override\n            public void artifactDownloadFailed(TargetClientException e) {\n                System.out.println("The artifact failed to download.");\n            }\n        }).build();\n\nTargetClient targetJavaClient = TargetClient.create(clientConfig);\n\n\nvoid makeTargetRequests() {\n    List<MboxRequest> mboxRequests = new ArrayList<>();\n    mboxRequests.add((MboxRequest) new MboxRequest().name("a1-serverside-ab").index(1));\n\n    TargetDeliveryRequest targetDeliveryRequest = TargetDeliveryRequest.builder()\n            .context(new Context().channel(ChannelType.WEB))\n            .execute(new ExecuteRequest().setMboxes(mboxRequests))\n            .build();\n\n    TargetDeliveryResponse targetResponse = targetJavaClient.getOffers(targetDeliveryRequest);\n}\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-sdk-java-sdk-events-md-df266db16e1e9ba0b801.js.map